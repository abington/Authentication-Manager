<?php

namespace chippyash\Test\Authentication\Manager;

use Chippyash\Authentication\Manager\DigestManager;
use Chippyash\Authentication\Manager\Encoder\BasicEncoder;
use Chippyash\Authentication\Manager\Digest\BasicDigestCollection;
use Chippyash\Type\String\StringType;
use Chippyash\Type\Number\IntType;
use org\bovigo\vfs\vfsStream;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-17 at 20:00:28.
 */
class DigestManagerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var DigestManager
     */
    protected $object;

    /**
     * @var vfsStreamFile
     */
    protected $file;
    
    protected $encoder;
    
    protected $collection;
    
    public function setUp()
    {
        $realm = new StringType('realm');
        
        $root = vfsStream::setup();
        $this->file = vfsStream::newFile('digest.txt')
                ->at($root)
                ->setContent('');
        
        $this->encoder = new BasicEncoder();
        $this->encoder->setRealm($realm);
        
        $this->collection = new BasicDigestCollection(
                $this->encoder, 
                new StringType($this->file->url()));
        //cannot use LOCK_EX on vfsStreamFile so set options to zero
        $this->collection
                ->setRealm($realm)
                ->setWriteOptions(new IntType(0));
        
        $this->object = new DigestManager($this->collection);
    }
    
    public function testCanCreateADigestEntry() {
        $this->object->create(new StringType('foo'), new StringType('bar'));
        $fileContent = file_get_contents($this->file->url());
        $this->assertRegExp('/^foo:realm:.*$/', $fileContent);
    }

    /**
     * @expectedException Chippyash\Authentication\Manager\Exceptions\AuthManagerException
     * @expectedExceptionMessage Uid: foo already exists
     */
    public function testCreatingAnExistingDigestEntryThrowsException() {
        $this->object->create(new StringType('foo'), new StringType('bar'));
        $this->object->create(new StringType('foo'), new StringType('bar'));
    }

    public function testCanReadAnExistingEntry()
    {
        $this->object->create(new StringType('foo'), new StringType('bar'));
        $item = $this->object->read(new StringType('foo'));
        $this->assertRegexp('/^foo:realm:.*$/', $item);
    }
    
    /**
     * @expectedException Chippyash\Authentication\Manager\Exceptions\AuthManagerException
     * @expectedExceptionMessage Uid: foo does not exist
     */
    public function testReadingANonExistentEntryThrowsException()
    {
        $this->object->read(new StringType('foo'));
    }
    
    public function testCanUpdateAnExistingEntry() {
        $this->object->create(new StringType('foo'), new StringType('bar'));
        $origItem = $this->object->read(new StringType('foo'));
        $this->object->update(new StringType('foo'), new StringType('baz'));
        $updatedItem = $this->object->read(new StringType('foo'));
        $this->assertNotEquals($origItem, $updatedItem);
    }

    /**
     * @expectedException Chippyash\Authentication\Manager\Exceptions\AuthManagerException
     * @expectedExceptionMessage Uid: foo does not exist
     */
    public function testCannotUpdateNonExistentEntry() {
        $this->object->update(new StringType('foo'), new StringType('baz'));
    }
    
    public function testHasReturnsTrueForAnExistingEntry()
    {
        $this->object->create(new StringType('foo'), new StringType('baz'));
        $this->assertTrue($this->object->has(new StringType('foo')));
    }
    
    public function testHasReturnsFalseForANonExistentEntry()
    {
        $this->assertFalse($this->object->has(new StringType('foo')));
    }
    
    public function testCanDeleteExistingEntry() {
        $this->object->create(new StringType('foo'), new StringType('bar'));
        $this->object->create(new StringType('bar'), new StringType('baz'));
        $this->assertTrue($this->object->has(new StringType('foo')));
        $this->assertTrue($this->object->delete(new StringType('foo')));
        $this->assertFalse($this->object->has(new StringType('foo')));
        $this->assertTrue($this->object->has(new StringType('bar')));
    }
    
    /**
     * @expectedException Chippyash\Authentication\Manager\Exceptions\AuthManagerException
     * @expectedExceptionMessage Uid: foo does not exist
     */
    public function testDeletingNonExistentEntryThrowsException()
    {
        $this->object->delete(new StringType('foo'));
    }
}
